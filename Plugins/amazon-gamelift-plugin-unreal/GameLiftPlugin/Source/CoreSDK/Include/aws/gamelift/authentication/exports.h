// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.

/** @file
 * @brief The C interface for the Authentication library.
 */

#pragma once
#include <aws/gamelift/authentication/gamelift_session_manager.h>
#include <aws/gamelift/core/api.h>
#include <aws/gamelift/core/logging.h>

 /**
  * @brief GameLiftSessionManager instance handle created by calling #GameLiftSessionManagerInstanceCreate()
 */
typedef void* GAMELIFT_SESSIONMANAGER_INSTANCE_HANDLE;

/**
 * @brief A pointer to an instance of a class that can receive a callback.
 *
 * @details The callback method signature is specified by each API which uses a DISPATCH_RECEIVER_HANDLE.
 *
 * For example: GameLiftSettingsGetGameName() uses a callback signature of CharPtrCallback,
 * whereas GameLiftSettingsGetCustomEnvironments() uses a callback signature of KeyValueCharPtrCallbackDispatcher.
 */
typedef void* DISPATCH_RECEIVER_HANDLE;

extern "C"
{
    /**
     * @brief A static dispatcher function pointer that receives a character array.
     *
     * @param dispatchReceiver A pointer to an instance of a class where the results will be dispatched to.
     * This instance must have a method signature of void ReceiveResult(const char* charPtr);
     * @param charPtr The character array pointer that the callback function receives.
    */
    typedef void(*CharPtrCallback)(DISPATCH_RECEIVER_HANDLE dispatchReceiver, const char* charPtr);
}

extern "C"
{
    /**
     * @brief Create a GameLiftSessionManager instance, which can be used to access the SessionManager API.
     *
     * @details Make sure to call GameLiftSessionManagerInstanceRelease() to destroy the returned object when finished with it.
     *
     * @param clientConfigFile (Optional, can be a nullptr or empty string) Relative filepath to the generated file "awsGameLiftClientConfig.yml".
     * The config file is generated by GAMELIFT each time a feature is deployed or re-deployed, and has settings for each GAMELIFT feature you've deployed.
     * @param logCb Callback function for logging information and errors.
     * @return Pointer to the new GameLiftSessionManager instance.
     */
    GAMELIFT_API GAMELIFT_SESSIONMANAGER_INSTANCE_HANDLE GameLiftSessionManagerInstanceCreate(const char* clientConfigFile, FuncLogCallback logCb);

    /**
     * @brief Check if the settings are loaded for the feature.
     *
     * @detailed These settings are found in file "awsGameLiftClientConfig.yml" which is generated by GAMELIFT each time you deploy or re-deploy a feature.
     * The file is loaded by calling either GameLiftSessionManagerInstanceCreate() or GameLiftSessionManagerReloadConfigFile().
     *
     * @param sessionManagerInstance Pointer to GameLiftSessionManager instance created with GameLiftSessionManagerInstanceCreate().
     * @param featureType The feature to check.
     * @return True if the settings for the feature are loaded, false otherwise.
    */
    GAMELIFT_API bool GameLiftSessionManagerAreSettingsLoaded(GAMELIFT_SESSIONMANAGER_INSTANCE_HANDLE sessionManagerInstance, GameLift::FeatureType featureType);

    /**
     * @brief Replace any loaded client settings with new settings from the provided file.
     *
     * @param sessionManagerInstance Pointer to GameLiftSessionManager instance created with GameLiftSessionManagerInstanceCreate().
     * @param clientConfigFile Relative filepath to the generated file "awsGameLiftClientConfig.yml".
     * The config file is generated by GAMELIFT each time a feature is deployed or re-deployed, and has settings for each GAMELIFT feature you've deployed.
     */
    GAMELIFT_API void GameLiftSessionManagerReloadConfigFile(GAMELIFT_SESSIONMANAGER_INSTANCE_HANDLE sessionManagerInstance, const char* clientConfigFile);

    /**
     * @brief Update AccessToken, RefreshToken and IdToken values by username and password.
     *
     * @details Session manager has to configured. The user_pool_client_id and identity_region must be set.
     *
     * @param sessionManagerInstance Pointer to GameLiftSessionManager instance created with GameLiftSessionManagerInstanceCreate().
     * @param user Username
     * @param pass Password
     */
    GAMELIFT_API unsigned int GameLiftAuthByUsernamePassword(GAMELIFT_SESSIONMANAGER_INSTANCE_HANDLE sessionManagerInstance, const char* user, const char* pass);

    /**
     * @brief SignUp by username and password.
     *
     * @details Create new user in Cognito user pull with username and password.
     *
     * @param sessionManagerInstance Pointer to GameLiftSessionManager instance created with GameLiftSessionManagerInstanceCreate().
     * @param user Username
     * @param pass Password
     */
    GAMELIFT_API unsigned int GameLiftSignUpByUsernamePassword(GAMELIFT_SESSIONMANAGER_INSTANCE_HANDLE sessionManagerInstance, const char* user, const char* pass);

    /**
     * @brief Confirm SignUp by username and code.
     *
     * @param sessionManagerInstance Pointer to GameLiftSessionManager instance created with GameLiftSessionManagerInstanceCreate().
     * @param user Username
     * @param code Confirmation code
     */
    GAMELIFT_API unsigned int GameLiftConfirmSignUpByUsernameCode(GAMELIFT_SESSIONMANAGER_INSTANCE_HANDLE sessionManagerInstance, const char* user, const char* code);

    /**
     * @brief Get tokenId.
     *
     * @details Get tokenId.
     *
     * @param sessionManagerInstance Pointer to GameLiftSessionManager instance created with GameLiftSessionManagerInstanceCreate().
     * @param dispatchReceiver Pointer to the caller object (object that will handle the callback function).
     * @param resultCb Pointer to the callback function to invoke on completion.
     */
    GAMELIFT_API void GameLiftGetTokenId(GAMELIFT_SESSIONMANAGER_INSTANCE_HANDLE sessionManagerInstance, DISPATCH_RECEIVER_HANDLE dispatchReceiver, CharPtrCallback resultCb);
    
    /**
     * @brief Get Identity Api Gateway URL.
     *
     * @details Get Identity Api Gateway URL.
     *
     * @param sessionManagerInstance Pointer to GameLiftSessionManager instance created with GameLiftSessionManagerInstanceCreate().
     * @param dispatchReceiver Pointer to the caller object (object that will handle the callback function).
     * @param resultCb Pointer to the callback function to invoke on completion.
     */
    GAMELIFT_API unsigned int GameLiftGetIdentityApiGatewayURL(GAMELIFT_SESSIONMANAGER_INSTANCE_HANDLE sessionManagerInstance, DISPATCH_RECEIVER_HANDLE dispatchReceiver, CharPtrCallback resultCb);

    /**
     * @brief Destroy the provided GameLiftSessionManager instance.
     *
     * @param sessionManagerInstance Pointer to GameLiftSessionManager instance created with GameLiftSessionManagerInstanceCreate().
     */
    GAMELIFT_API void GameLiftSessionManagerInstanceRelease(GAMELIFT_SESSIONMANAGER_INSTANCE_HANDLE sessionManagerInstance);
}
